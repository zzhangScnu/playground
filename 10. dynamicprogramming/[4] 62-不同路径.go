package dynamicprogramming

// 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
//
// 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
//
// 问总共有多少条不同的路径？
//
// 示例 1：
//
// 输入：m = 3, n = 7
// 输出：28
//
// 示例 2：
//
// 输入：m = 3, n = 2
// 输出：3
// 解释：
// 从左上角开始，总共有 3 条路径可以到达右下角。
// 1. 向右 -> 向下 -> 向下
// 2. 向下 -> 向下 -> 向右
// 3. 向下 -> 向右 -> 向下
//
// 示例 3：
//
// 输入：m = 7, n = 3
// 输出：28
//
// 示例 4：
//
// 输入：m = 3, n = 3
// 输出：6
//
// 提示：
//
// 1 <= m, n <= 100
// 题目数据保证答案小于等于 2 * 10⁹
func uniquePaths(m int, n int) int {
	dp := make([][]int, m)
	for i := 0; i < m; i++ {
		dp[i] = make([]int, n)
	}
	for i := 0; i < n; i++ {
		dp[0][i] = 1
	}
	for i := 0; i < m; i++ {
		dp[i][0] = 1
	}
	for i := 1; i < m; i++ {
		for j := 1; j < n; j++ {
			dp[i][j] = dp[i-1][j] + dp[i][j-1]
		}
	}
	return dp[m-1][n-1]
}

/**
DP数组及下标含义：
- i, j：坐标
- dp[i][j]：走到该位置共有几种不同路径
递推公式：dp[i][j] = dp[i-1][j] + dp[i][j-1]
- 只能向右或向下走，且每次只能走一步，故走到当前位置有几种方式 -> 从这两个方向走过来有几种方式；
- 跟爬楼梯一样，求的是几种不同的方式而不是几步，所以无需+1；
- 不会有重复的情况，因为不存在回头路。
初始化：
- dp[i][j]由左方和上方的值推导而来，如dp[1][1] = dp[0][1] + dp[1][0]，故需要初始化dp[0][0...col-1]和dp[0...row-1][0]；
- 从[0, 0]出发，走到第0行的任意一列位置，都只有一种方法；同理，走到第0列的任意一行位置，也只有一种方法。
遍历顺序：某个值要由左方或上方的值推导而来，即依赖于从左到右、从上而下的遍历顺序。
*/
