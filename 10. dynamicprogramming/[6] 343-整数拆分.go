package dynamicprogramming

// 给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k >= 2 ），并使这些整数的乘积最大化。
//
// 返回 你可以获得的最大乘积 。
//
// 示例 1:
//
// 输入: n = 2
// 输出: 1
// 解释: 2 = 1 + 1, 1 × 1 = 1。
//
// 示例 2:
//
// 输入: n = 10
// 输出: 36
// 解释: 10 = 3 + 3 + 4, 3 ×3 ×4 = 36。
//
// 提示:
//
// 2 <= n <= 58
func integerBreak(n int) int {
	dp := make([]int, n+1)
	dp[1], dp[2] = 0, 1
	for i := 3; i <= n; i++ {
		for j := 1; j < i; j++ {
			dp[i] = max(dp[i], dp[i-j]*j)
		}
	}
	return dp[n]
}

/**
DP数组及含义：
- i：小于等于n的正整数，即 0 <= i <= n
- dp[i]：正整数i可拆分整数的最大乘积
递推公式：dp[i] = max(dp[i - 1] * 1, dp[i - 2] * 2, ..., dp[0] * i)
初始化：dp[1] = 0, dp[2] = 1
遍历顺序：从前到后
*/
