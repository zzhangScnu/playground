package dynamicprogramming

// 给定字符串 s 和 t ，判断 s 是否为 t 的子序列。
//
// 字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"ace"是"abcde"的一个子序列，而
// "aec"不是）。
//
// 进阶：
//
// 如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k >= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代
// 码？
//
// 示例 1：
//
// 输入：s = "abc", t = "ahbgdc"
// 输出：true
//
// 示例 2：
//
// 输入：s = "axc", t = "ahbgdc"
// 输出：false
//
// 提示：
//
// 0 <= s.length <= 100
// 0 <= t.length <= 10^4
// 两个字符串都只由小写字符组成。
func isSubsequence(s string, t string) bool {
	sl, tl := len(s), len(t)
	dp := make([][]int, sl+1)
	for i := 0; i <= sl; i++ {
		dp[i] = make([]int, tl+1)
	}
	for i := 1; i <= sl; i++ {
		for j := 1; j <= tl; j++ {
			if s[i-1] == t[j-1] {
				dp[i][j] = dp[i-1][j-1] + 1
			} else {
				dp[i][j] = dp[i][j-1]
			}
		}
	}
	return dp[sl][tl] == len(s)
}

/**
举例：
s = abc
t = aebgc


思路：
记录s在t中出现过的字符长度，如果恰好为s的长度，则表示s整体都在t中出现，即s是t的子序列。


DP数组及下标含义：
- i：s(source)中的当前下标 == i - 1；
- j：t(target)中的当前下标 == j - 1；
- dp[i][j]：以s[i - 1]结尾的字符串，在t[j - 1]结尾的字符串中出现的长度(均从0开始)。即i-1 / j-1是遍历s / t的游标。
i - 1/j - 1的特殊处理是因为便于初始化，否则需要根据入参特殊处理第一行和第一列。

递推公式：
if s[i - 1] == t[j - 1] // s当前字符 == t当前字符
dp[i][j] = dp[i - 1][j - 1] + 1 // s[0...i - 1]在t[0...j - 1]中出现的长度，需要在s[0...i - 2]在t[0...j - 2]中出现的长度的基础上，加上1
else if s[i - 1] != t[j - 1] // s当前字符 != t当前字符
dp[i][j] = dp[i][j - 1] // s[0...i - 1]在t[0...j - 1]中出现的长度，等于s[0...i - 1]在t[0...j - 2]中出现的长度。

关于dp[i][j] = dp[i][j - 1]：
s和t的当前字符不匹配时，因为求的是s是否t的子序列，所以需要退而求其次，"删除"t的当前字符，再尝试匹配。
当比较到i = 3(s的'c')和j = 5(t的'g')时：
1. 发现s[2] != t[4]
2. 这时选择"删除"t的当前字符，即忽略t[j - 1]
3. t删掉第5个字符后，比较s的前3个字符是否在t的前4个字符中存在
4. 此时问题转化为判断dp[3][4]的结果

递推公式的两个分支，实际对应两种操作选择：
- 当字符匹配时：同时移动两个指针，相当于消耗了这两个字符。i - 1 -> i，j - 1 -> j；
- 当字符不匹配时：只移动t的指针，相当于跳过t的当前字符。j - 1 -> j；
这种设计保证在t中按顺序寻找s的字符，而s的字符顺序必须严格保持。整个过程不需要删除s的字符，因为子序列要求必须完整包含s的所有字符。

其实跟1143也有相似处，1143-最长公共子序列，是当字符不匹配时，同时尝试移动text1和text2的指针，"删除"某一个字符从而择优转移。

再换个视角看，由dp table可知：
  a e b c g
a
b
c
s中的每个字符跟t做对比只发生在某行中，故当字符不匹配时，横向继承即可，而不用max(dp[i][j-1], dp[i-1][j])。


初始化：
因为用dp[i][j]表示s[i - 1]和t[j - 1]比较的情况，所以第一行和第一列实际上是没有意义的，只是防止递推时数组越界。
故保持默认零值即可。


遍历方向：
从字符串的左到右。
*/

// todo：双指针做法
