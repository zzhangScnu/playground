package dynamicprogramming

// 斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：
//
// F(0) = 0，F(1)= 1
// F(n) = F(n - 1) + F(n - 2)，其中 n > 1
//
// 给定 n ，请计算 F(n) 。
//
// 示例 1：
//
// 输入：n = 2
// 输出：1
// 解释：F(2) = F(1) + F(0) = 1 + 0 = 1
//
// 示例 2：
//
// 输入：n = 3
// 输出：2
// 解释：F(3) = F(2) + F(1) = 1 + 1 = 2
//
// 示例 3：
//
// 输入：n = 4
// 输出：3
// 解释：F(4) = F(3) + F(2) = 2 + 1 = 3
//
// 提示：
//
// 0 <= n <= 30
func fib(n int) int {
	if n < 2 {
		return n
	}
	dp := make([]int, n+1)
	dp[0], dp[1] = 0, 1
	for i := 2; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}
	return dp[n]
}

/**
动态规划五部曲：
- 确定DP数组及下标含义：dp[i] -> 斐波那契数，i -> 第i个斐波那契数
- 确定递推公式：由题意，dp[i] = dp[i-1] + dp[i-2]
- 确定DP数组初始化方式：由题意，dp[0] = 0，dp[1] = 1
- 确定遍历顺序：由于每一项数字都是前面两项数字的和，需要从前向后遍历
- 举例推导DP数组、打印DP数组
*/

/**
实际上这道题用3个变量就可以维护所需计算结果，当前状态只依赖于前2个状态。可以用长度为2的滚动数组，或简单的3个变量解决。
空间复杂度从O(n)降低至O(1)，这种思想叫状态压缩。
func fib(n int) int {
	if n < 2 {
		return n
	}
	sum, dp0, dp1 := 0, 0, 1
	for i := 2; i <= n; i++ {
		sum = dp1 + dp0
		dp1, dp0 = sum, dp1
	}
	return sum
}


base case:
if n < 2 {
	return n
}
否则会发生数组越界。

本题如果用递归实现容易超时，因为会存在大量的重复子问题，如f(0)和f(1)的计算。
可以用一个数组保存计算结果，记忆化操作。
*/
