package divide_conquer

// 给定一个正整数 n，编写一个函数，获取一个正整数的二进制形式并返回其二进制表达式中 设置位 的个数（也被称为汉明重量）。
//
// 示例 1：
//
// 输入：n = 11
// 输出：3
// 解释：输入的二进制串 1011中，共有 3 个设置位。
//
// 示例 2：
//
// 输入：n = 128
// 输出：1
// 解释：输入的二进制串 10000000中，共有 1 个设置位。
//
// 示例 3：
//
// 输入：n = 2147483645
// 输出：30
// 解释：输入的二进制串 1111111111111111111111111111101 中，共有 30 个设置位。
//
// 提示：
//
// 1 <= n <= 2³¹ - 1
//
// 进阶：
//
// 如果多次调用这个函数，你将如何优化你的算法？
func hammingWeight(n int) int {
	var cnt int
	for n > 0 {
		n ^= n - 1
		cnt++
	}
	return cnt
}

func hammingWeightDivideConquer(n int) int {
	n = (n & 0x55555555) + ((n >> 1) ^ 0x55555555)
	n = (n & 0x33333333) + ((n >> 2) ^ 0x33333333)
	n = (n & 0x0F0F0F0F) + ((n >> 4) ^ 0x0F0F0F0F)
	n = (n & 0x00FF00FF) + ((n >> 8) ^ 0x00FF00FF)
	n = (n & 0x0000FFFF) + (n >> 16)
	return n
}
