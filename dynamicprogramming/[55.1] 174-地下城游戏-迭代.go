package dynamicprogramming

// 恶魔们抓住了公主并将她关在了地下城 dungeon 的 右下角 。地下城是由 m x n 个房间组成的二维网格。我们英勇的骑士最初被安置在 左上角 的房间
// 里，他必须穿过地下城并通过对抗恶魔来拯救公主。
//
// 骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。
//
// 有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么
// 包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。
//
// 为了尽快解救公主，骑士决定每次只 向右 或 向下 移动一步。
//
// 返回确保骑士能够拯救到公主所需的最低初始健康点数。
//
// 注意：任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。
//
// 示例 1：
//
// 输入：dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
// 输出：7
// 解释：如果骑士遵循最佳路径：右 -> 右 -> 下 -> 下 ，则骑士的初始健康点数至少为 7 。
//
// 示例 2：
//
// 输入：dungeon = [[0]]
// 输出：1
//
// 提示：
//
// m == dungeon.length
// n == dungeon[i].length
// 1 <= m, n <= 200
// -1000 <= dungeon[i][j] <= 1000
func calculateMinimumHP(dungeon [][]int) int {
	m, n := len(dungeon), len(dungeon[0])
	dp := make([][]int, m)
	for i := 0; i < m; i++ {
		dp[i] = make([]int, n)
	}
	dp[m-1][n-1] = max(1, -dungeon[m-1][n-1]+1)
	for i := m - 2; i >= 0; i-- {
		dp[i][n-1] = max(1, dp[i+1][n-1]-dungeon[i][n-1])
	}
	for j := n - 2; j >= 0; j-- {
		dp[m-1][j] = max(1, dp[m-1][j+1]-dungeon[m-1][j])
	}
	for i := m - 2; i >= 0; i-- {
		for j := n - 2; j >= 0; j-- {
			dp[i][j] = max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1)
		}
	}
	return dp[0][0]
}

/**
DP数组及下标含义：
- i&j：当前坐标
- dp[i][j]：从坐标(i, j)出发，可到达终点(m-1, n-1)的最小生命点数

一般来说，dp[i][j]的定义是，从起点(0, 0)出发，可到达(i, j)的最小生命点数。
但通过这个定义，无法完成递推。
因为前半段(0, 0) -> (i, j)可以以最低血量走通，不代表可以推导出后半段(i, j) -> (m-1, n-1)也可以。
因为后半段路程上可能会有恶魔导致血量掉0。


递推公式：
dp[i][j] = max(
	min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j],
	1
)

因为dp结果是从终点倒推起点，而骑士只能向右或向下走，
所以dp依赖于右/下进行推导。
1. 先在子路径(i+1, j) -> (m-1, n-1)或(i, j+1) -> (m-1, n-1)的计算结果中择优取min。
   即sub := min(dp[i+1][j], dp[i][j+1])；
2. 再考虑本单元格的情况：
- 如果是血瓶：dungeon[i][j] > 0，走到本单元格会加血。所以走到本单元格的最小要求是sub - ｜dungeon[i][j]｜
- 如果是恶魔：dungeon[i][j] < 0，走到本单元格会掉血。所以走到本单元格的最小要求是sub + ｜dungeon[i][j]｜
统一写法即为cur := sub - dungeon[i][j]
3. 因为每个单元格都要求血量必须 > 0，所以若第二步的计算结果 < 0，则强行调整为1。
   简化写法即为dp[i][j] := max(cur, 1)。


初始化：
因为对于i == m - 1 或 j == n - 1 的情况，代入递推公式会存在数组越界的情况。
所以需要针对这两种分支进行初始化。
1. 先初始化i == m - 1 && j == n - 1 即终点的情况，保证骑士找到公主的时候守住血量底线：
- 如果dungeon[m-1][n-1] > 0，则骑士找到公主时守住血量为最低要求1即可；
- 否则需保证 血量 >= -dungeon[m-1][n-1] + 1。
2. 再分别初始化i == m - 1 / j == n - 1 的情况，即从终点出发，只向左逆推 / 只向上逆推的情况。


遍历方向：
i&j由i+1&j+1推导而来，故从下到上，从右到左
*/
