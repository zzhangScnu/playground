package dynamicprogramming

// 给定两个字符串s1 和 s2，返回 使两个字符串相等所需删除字符的 ASCII 值的最小和 。
//
// 示例 1:
//
// 输入: s1 = "sea", s2 = "eat"
// 输出: 231
// 解释: 在 "sea" 中删除 "s" 并将 "s" 的值(115)加入总和。
// 在 "eat" 中删除 "t" 并将 116 加入总和。
// 结束时，两个字符串相等，115 + 116 = 231 就是符合条件的最小和。
//
// 示例 2:
//
// 输入: s1 = "delete", s2 = "leet"
// 输出: 403
// 解释: 在 "delete" 中删除 "dee" 字符串变成 "let"，
// 将 100[d]+101[e]+101[e] 加入总和。在 "leet" 中删除 "e" 将 101[e] 加入总和。
// 结束时，两个字符串都等于 "let"，结果即为 100+101+101+101 = 403 。
// 如果改为将两个字符串转换为 "lee" 或 "eet"，我们会得到 433 或 417 的结果，比答案更大。
//
// 提示:
//
// 0 <= s1.length, s2.length <= 1000
// s1 和 s2 由小写英文字母组成
func minimumDeleteSum(s1 string, s2 string) int {
	m, n := len(s1), len(s2)
	dp := make([][]int, m+1)
	for i := 0; i <= m; i++ {
		dp[i] = make([]int, n+1)
	}
	for j := 1; j <= n; j++ {
		dp[0][j] = dp[0][j-1] + int(s2[j-1])
	}
	for i := 1; i <= m; i++ {
		dp[i][0] = dp[i-1][0] + int(s1[i-1])
	}
	for i := 1; i <= m; i++ {
		for j := 1; j <= n; j++ {
			if s1[i-1] == s2[j-1] {
				dp[i][j] = dp[i-1][j-1]
			} else {
				dp[i][j] = min(
					dp[i-1][j]+int(s1[i-1]),
					dp[i][j-1]+int(s2[j-1]),
				)
			}
		}
	}
	return dp[m][n]
}

/**
DP数组及下标含义
- i：s1中当前指针指向的位置
- j：s2中当前指针指向的位置
- dp[i][j]：s1[0...i]和s2[0...j]相等时，删除字符的最小ASCII和。

递推公式
if s1[i] == s2[j]
	dp[i][j] = dp[i-1][j-1] // 两个子字符串相同，i和j同时向前推进。即继承dp[i-1][j-1]的结果
else
dp[i][j] = min(
		dp[i-1][j] + s1[i], // 删除s1当前字符，且因为i出局&j保留，需继承dp[i-1][j]的结果
		dp[i][j-1] + s2[j] // 删除s2当前字符
	)

初始化
i == 0时，dp[0][j] == len(s2[0...j])的ASCII和
j == 0时，dp[i][0] == len(s1[0...i])的ASCII和

遍历方向
dp[i][j]由dp[i-1][j-1] / dp[i-1][j] / dp[i][j-1]推导而来，
故从左到右，由上而下。

注意：
dp数组需扩展为dp[len(s1)+1][len(s2)+1]，否则无法表达：
当s1为空字符串/s2为空字符串时，另一个字符串需全部删除的ASCII和。
因为扩展后才能将i == 0 / j == 0表达为指向空字符，
否则含义是指向s1 / s2的第一个字符。
长度扩展后，需注意：
- 初始化/计算递推结果的循环有效区间变为[1, len(s1)+1)；
- 各处的比较逻辑都需减去1。
*/
