package dynamicprogramming

// 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
//
// 子数组 是数组中的一个连续部分。
//
// 示例 1：
//
// 输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
// 输出：6
// 解释：连续子数组[4,-1,2,1] 的和最大，为6 。
//
// 示例 2：
//
// 输入：nums = [1]
// 输出：1
//
// 示例 3：
//
// 输入：nums = [5,4,-1,7,8]
// 输出：23
//
// 提示：
//
// 1 <= nums.length <= 10⁵
// -10⁴ <= nums[i] <= 10⁴
//
// 进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。
func maxSubArray(nums []int) int {
	n := len(nums)
	dp := make([]int, n)
	dp[0] = nums[0]
	res := dp[0]
	for i := 1; i < n; i++ {
		dp[i] = max(nums[i], dp[i-1]+nums[i])
		res = max(res, dp[i])
	}
	return res
}

/**
DP数组及下标含义：
- i：nums中的索引位置i；
- dp[i]：以nums[i]结尾的连续子数组的最大和。

注意，这里的定义必须是"以nums[i]结尾"，否则如果是"dp[i]：nums[0, ... i]中的最大子数组和"，就会暗藏不连续的情况。

递推公式：
dp[i] = max(nums[i], dp[i-1] + nums[i])
- nums[i]：自成一派，自己作为新的子数组，重新开始求和
- dp[i-1] + nums[i]：与前面的子数组合并，在先前结果的基础上继续求和
如之前分析，对于要求结果连续的情况，需要用一个全局变量来维护最终结果。
之前的实现是：
if dp[i] > res {
	res = dp[i]
}
但其实可以写成 res = max(res, dp[i])

初始化：
dp[0] = nums[0]
因为题目要求子数组最少包含一个元素，所以只有一个元素时，最大值就是该元素的值。
自然最终结果res也要初始化为dp[0]的值。

遍历方向：从左到右。
*/
