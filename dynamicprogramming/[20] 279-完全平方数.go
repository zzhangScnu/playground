package dynamicprogramming

import "math"

// 给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。
//
// 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
//
// 示例 1：
//
// 输入：n = 12
// 输出：3
// 解释：12 = 4 + 4 + 4
//
// 示例 2：
//
// 输入：n = 13
// 输出：2
// 解释：13 = 4 + 9
//
// 提示：
//
// 1 <= n <= 10⁴
func numSquares(n int) int {
	dp := make([]int, n+1)
	for i := 1; i <= n; i++ {
		dp[i] = math.MaxInt64
	}
	for j := 1; j <= n; j++ {
		for i := 1; i*i <= j; i++ {
			dp[j] = min(dp[j], dp[j-i*i]+1)
		}
	}
	return dp[n]
}

/**
DP数组及下标含义：
- j：背包容量为j；
- dp[j]：背包容量为j时，对任意物品取/不取的最少数量。其中背包容量 -> 整数；物品 -> (整数开根号)的平方。

递推公式：
dp[j] = min(dp[j], dp[j-i*i]+1)

初始化：
dp[0] = 0：题目中没说0是完全平方数，这里为0的原因是为了后续单元格的计算。
其余单元格应初始化为最大值，才能正确执行min操作，否则计算结果会一直被默认零值覆盖。

递推方向：
从左到右
先物品再背包(组合数) / 先背包再物品(排列数)？
都可以，因为本题是求最小值。
*/
