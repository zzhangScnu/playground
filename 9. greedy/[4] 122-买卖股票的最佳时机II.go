package greedy

// 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
//
// 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
//
// 返回 你能获得的 最大 利润 。
//
// 示例 1：
//
// 输入：prices = [7,1,5,3,6,4]
// 输出：7
// 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
// 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3。
// 最大总利润为 4 + 3 = 7 。
//
// 示例 2：
//
// 输入：prices = [1,2,3,4,5]
// 输出：4
// 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4。
// 最大总利润为 4 。
//
// 示例 3：
//
// 输入：prices = [7,6,4,3,1]
// 输出：0
// 解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0。
//
// 提示：
//
// 1 <= prices.length <= 3 * 10⁴
// 0 <= prices[i] <= 10⁴
func maxProfit(prices []int) int {
	var profit int
	for i := 1; i < len(prices); i++ {
		profit = max(0, prices[i]-prices[i-1])
	}
	return profit
}

/**
实际上就是摆动序列的思想：
计算每一段上升的序列，每段上升 -> 局部最优，累加和 -> 全局最优。
因为若第四天卖出，profit[3] = prices[3] - prices[0]，实际上就是
profit[3] = prices[3] - prices[2] + prices[2] - prices[1] + prices[1] - prices[0]，
即为每天买卖的利润值之和。
若要求总利润最大，根据贪心算法就是求正利润之和。

这里有个技巧：
不需要先将所有的天利润算出来，再遍历将>0的挑出来累加，
而是可以边遍历边判断边累加。
*/
