package array

// 给定一个整数 n ，返回 n! 结果中尾随零的数量。
//
// 提示 n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1
//
// 示例 1：
//
// 输入：n = 3
// 输出：0
// 解释：3! = 6 ，不含尾随 0
//
// 示例 2：
//
// 输入：n = 5
// 输出：1
// 解释：5! = 120 ，有一个尾随 0
//
// 示例 3：
//
// 输入：n = 0
// 输出：0
//
// 提示：
//
// 0 <= n <= 10⁴
//
// 进阶：你可以设计并实现对数时间复杂度的算法来解决此问题吗？
func trailingZeroes(n int) int {
	divisor := 5
	var res int
	for divisor <= n {
		res += n / divisor
		divisor *= 5
	}
	return res
}

/*
这种写法注意，循环有效条件为 i > 0，而不是i >= 0，后者会导致死循环。
*/
func trailingZeroesII(n int) int {
	var res int
	for i := n; i > 0; i /= 5 {
		res += i / 5
	}
	return res
}

/**
思路：
阶乘后0的数量，取决于阶乘中能提供2和5的数量。——todo：缺一个数学解释！
又因为所有偶数是2的乘积，2的数量会比5多得多。
所以核心在于5的数量。

对于125!，即[125 * 124 * 123 * ... * 5 * 4* 3 * 2 * 1]来说，
能提供1个5数的有：5的倍数的个数，如5，10， 20，...
能提供2个5的数有：5 * 5即25的倍数的个数，如25，50，100...，这些数比5的倍数额外多提供一个5；
能提供3个5的数有：5 * 5 * 5即125的倍数的个数，如125，625...，这些数比5 * 5的倍数额外多提供一个4；
...
所以5的数量为这些个数的加总，即为125!的尾随零的数量。
*/
