package binarysearch

// 已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变
// 化后可能得到：
//
// 若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
// 若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
//
// 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2],
// ..., a[n-2]] 。
//
// 给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。
//
// 你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。
//
// 示例 1：
//
// 输入：nums = [3,4,5,1,2]
// 输出：1
// 解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
//
// 示例 2：
//
// 输入：nums = [4,5,6,7,0,1,2]
// 输出：0
// 解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。
//
// 示例 3：
//
// 输入：nums = [11,13,15,17]
// 输出：11
// 解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。
//
// 提示：
//
// n == nums.length
// 1 <= n <= 5000
// -5000 <= nums[i] <= 5000
// nums 中的所有整数 互不相同
// nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转
func findMin(nums []int) int {
	res := nums[0]
	mid, low, high := 0, 0, len(nums)-1
	for low <= high {
		if nums[low] < nums[high] {
			res = min(res, nums[low])
			break
		}
		mid = low + (high-low)/2
		res = min(res, nums[mid])
		if nums[low] <= nums[mid] {
			low = mid + 1
		} else {
			high = mid - 1
		}
	}
	return res
}

/**
思路：
旋转n次，即为将数组的后n个元素拼接到最前端。
所以数组整体分为两部分，每部分保持升序且元素各不相同。
由题目要求时间复杂度为 O(log n)，可以优先考虑二分查找：

- 若当前元素处于左半部分，即nums[low] <= nums[mid]，说明mid指向整体元素较大的数组。
  因为原数组是升序的，旋转操作会将靠后部分较大的元素序列放置到靠前部分。
  所以此时应往右边缩小搜索范围。

  因为low只会在mid指向整体元素较大的数组时，改变为low + 1，
  所以下一轮处理开始时，若nums[low] < nums[high]，此时的搜索范围已经整体有序了，
  说明low已经踏入了整体元素较小的数组，直接取最左的元素即可。

- 反之应往左边缩小搜索范围，往两部分数组的拼接点逼近。
*/
