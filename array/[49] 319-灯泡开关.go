package array

import "math"

// 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭第二个。
//
// 第三轮，你每三个灯泡就切换第三个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换第 i 个灯泡的开关。直到第 n 轮，你只需要
// 切换最后一个灯泡的开关。
//
// 找出并返回 n 轮后有多少个亮着的灯泡。
//
// 示例 1：
//
// 输入：n = 3
// 输出：1
// 解释：
// 初始时, 灯泡状态 [关闭, 关闭, 关闭].
// 第一轮后, 灯泡状态 [开启, 开启, 开启].
// 第二轮后, 灯泡状态 [开启, 关闭, 开启].
// 第三轮后, 灯泡状态 [开启, 关闭, 关闭].
//
// 你应该返回 1，因为只有一个灯泡还亮着。
//
// 示例 2：
//
// 输入：n = 0
// 输出：0
//
// 示例 3：
//
// 输入：n = 1
// 输出：1
//
// 提示：
//
// 0 <= n <= 10⁹
func bulbSwitch(n int) int {
	return int(math.Sqrt(float64(n)))
}

/**
灯泡的初始状态为关闭，要使得其保持打开状态，则需令其开关的拨动次数为奇数次。

因为拨动的规律是：第 i 轮就在每i个灯泡中拨动最后一个灯泡开关，
所以例如第16个灯泡，拨动的场景为：
i = 1, 2, 4, 8, 16，归纳起来就是 i 的因数，
  = 1 * 16, 2 * 8, 4 * 4
  = 前两组为偶数次，最后一组为奇数次，因为 i 只能等于1次4。
  所以第16个灯泡最终是亮的。

所以问题转化为：寻找在[0, n]范围内，形如 4 * 4 这样的完全平方数有多少个，代表的就是能够拨动奇数次开关的灯泡，也就是最终保持亮着的灯泡数量。
*/
