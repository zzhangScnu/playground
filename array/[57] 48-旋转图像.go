package array

// 给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。
//
// 你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。
//
// 示例 1：
//
// 输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
// 输出：[[7,4,1],[8,5,2],[9,6,3]]
//
// 示例 2：
//
// 输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
// 输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
//
// 提示：
//
// n == matrix.length == matrix[i].length
// 1 <= n <= 20
// -1000 <= matrix[i][j] <= 1000
func rotateMatrix(matrix [][]int) {
	n := len(matrix)
	l, r, t, b := 0, n-1, 0, n-1
	var temp int
	for l < r {
		for i := 0; i < r-l; i++ {
			temp = matrix[t][l+i]
			matrix[t][l+i] = matrix[b-i][l]
			matrix[b-i][l] = matrix[b][r-i]
			matrix[b][r-i] = matrix[t+i][r]
			matrix[t+i][r] = temp
		}
		l, r, t, b = l+1, r-1, t+1, b-1
	}
}

/**
思路：
类似于从最外围开始逐个元素旋转，一圈处理完成后，向内收紧一圈。
- 锚定四个顶点：l，r，t，b -> 左，右，上，下。用四个顶点值来控制处理哪一圈。
  每次处理一圈数字，如第一轮处理最外层，第n轮处理最内层；
- 旋转矩阵 -> 每个顶点旋转90度 -> 用i来控制旋转的步长；
- 因为顺时针赋值的话，会存在元素覆盖的问题，需要引入4个中间变量做临时存储；
  如果逆向赋值，仅需要引入1个中间变量存储起点的值。
*/
